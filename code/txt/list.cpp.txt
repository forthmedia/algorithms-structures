//  Kurt Jonach
//  STL Compatible Linked List Container
//  Implements begin(), end(), * ++ == !=

//  Note that interface, implementation and main
//  are usually separate files.

#include <iostream>
#include <string>
#include <vector>
using namespace std;

////////// INTERFACE //////////
class List;

class Node {
    friend class Iterator;
    friend class List;
    
private:
    Node(const string&item, Node* next) : item(item), next(next) {}
    string item;
    Node* next;
};

class Iterator :public iterator<forward_iterator_tag, List> {
    friend class List;
    
public:
    string& operator*();
    const Iterator& operator++();
    bool operator ==(const Iterator& other) const;
    bool operator !=(const Iterator& other) const;
    
private:
    Iterator(Node* p) : pointer(p) {}
    Node* pointer;
};

class List
{
private:
    Node* head;
    
public:
    typedef Iterator iterator;
    
    List();
    void add(string i);
    void del(string i);
    iterator begin() { return Iterator(head); }
    iterator end() { return Iterator(nullptr); }
    ~List();
};

////////// LIST IMPLEMENTATION //////////

List::List()
{
    //init head
    head = nullptr;
}

void List::add(string i)
{
    Node* n = new Node(i, nullptr);
    
    if (head != nullptr) {
        Node* curr = head;
        while (curr->next != nullptr) {
            curr = curr->next;
        }
        curr->next = n;
    } else {
        head = n;
    }
}

void List::del(string i) {
    if (head == nullptr) {
        cout<<"error: nothing to delete\n";
    } else if (head->item == i) {
        //move head
        Node* temp = head;
        head = head->next;
        delete temp;
    } else {
        Node* curr = head;
        Node* prev = head;
        while(curr->next != nullptr && curr->item != i) {
            prev = curr;
            curr = curr->next;
        }
        if (curr->item == i) {
            prev->next = curr->next;
            delete curr;
        } else {
            cout<<"error: "<<i<<" not in list\n";
        }
    }
}

List::~List()
{
    Node* curr = head;
    while(curr != nullptr) {
        Node* temp = curr;
        curr = curr->next;
        delete temp;
    }
}

////////// ITERATOR IMPLEMENTATION //////////

string& Iterator::operator*()
{
    return pointer->item;
}

const Iterator& Iterator::operator++()
{
    pointer = pointer->next;
    return *this;
}

bool Iterator::operator==(const Iterator &other) const
{
    return this->pointer == other.pointer;
}

bool Iterator::operator!=(const Iterator &other) const
{
    return this->pointer != other.pointer;
}

////////// MAIN //////////

template <typename In> void print_list(In first, In last);

int main() {
    List list;
    
    cout<<"try to remove Tyr (empty list)\n";
    list.del("Tyr");
    
    cout<<"add Norse pantheon to list\n";
    list.add("Wotan");
    list.add("Thor");
    list.add("Freya");
    list.add("Yggdrasil");
    print_list(list.begin(), list.end());

    cout<<"remove Wotan add Odin (delete head)\n";
    list.del("Wotan");
    list.add("Odin");
    print_list(list.begin(), list.end());

    cout<<"remove Yggdrasil, it's a tree not a god. Add Loki.\n";
    list.del("Yggdrasil");
    list.add("Loki");
    print_list(list.begin(), list.end());
    
    cout<<"remove Loki, nobody likes him (delete tail)\n";
    list.del("Loki");
    print_list(list.begin(), list.end());
    
    cout<<"try to remove Tyr (again)\n";
    list.del("Tyr");
}

template <typename In> void print_list(In first, In last)
{
    if (first == last) {
        cout<<"list is empty\n";
    } else {
        while (first!=last) {
            cout<<*first<<endl;
            ++first;
        }
    }
}
